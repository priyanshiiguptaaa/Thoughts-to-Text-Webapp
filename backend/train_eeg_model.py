import numpy as np
from sklearn.model_selection import train_test_split
import copy
from sklearn.preprocessing import LabelEncoder
import torch
import torch.nn as nn
import torch.optim as optim

# Load dataset (generated by generate_eeg_dataset.py)
X = np.load("eeg_dataset/X.npy")
y = np.load("eeg_dataset/y.npy")

encoder = LabelEncoder()
y_encoded = encoder.fit_transform(y)
n_classes = len(encoder.classes_)

X_train, X_test, y_train, y_test = train_test_split(
    X, y_encoded, test_size=0.2, stratify=y_encoded, random_state=42
)
# Add a validation split from train set
X_train, X_val, y_train, y_val = train_test_split(
    X_train, y_train, test_size=0.2, stratify=y_train, random_state=42
)

# Convert to torch tensors
X_train = torch.tensor(X_train, dtype=torch.float32)
y_train = torch.tensor(y_train, dtype=torch.long)
X_val = torch.tensor(X_val, dtype=torch.float32)
y_val = torch.tensor(y_val, dtype=torch.long)
X_test = torch.tensor(X_test, dtype=torch.float32)
y_test = torch.tensor(y_test, dtype=torch.long)

# PyTorch expects (batch, channels, length)
X_train = X_train.permute(0, 2, 1)
X_val = X_val.permute(0, 2, 1)
X_test = X_test.permute(0, 2, 1)

class EEGNet(nn.Module):
    def __init__(self, n_classes):
        super(EEGNet, self).__init__()
        self.noise = nn.Sequential(
            nn.GaussianNoise(0.05) if hasattr(nn, 'GaussianNoise') else nn.Identity(),
            nn.Dropout(0.1)
        )
        self.conv1 = nn.Conv1d(8, 32, kernel_size=5)
        self.pool1 = nn.MaxPool1d(2)
        self.drop1 = nn.Dropout(0.3)
        self.conv2 = nn.Conv1d(32, 64, kernel_size=3)
        self.pool2 = nn.MaxPool1d(2)
        self.drop2 = nn.Dropout(0.3)
        self.flatten = nn.Flatten()
        with torch.no_grad():
            dummy = torch.zeros(1, 8, 384)
            dummy = self.noise(dummy)
            dummy = self.conv1(dummy)
            dummy = torch.relu(dummy)
            dummy = self.pool1(dummy)
            dummy = self.drop1(dummy)
            dummy = self.conv2(dummy)
            dummy = torch.relu(dummy)
            dummy = self.pool2(dummy)
            dummy = self.drop2(dummy)
            dummy = self.flatten(dummy)
            flattened_size = dummy.shape[1]
        self.fc1 = nn.Linear(flattened_size, 128)
        self.drop3 = nn.Dropout(0.4)
        self.fc2 = nn.Linear(128, n_classes)

    def forward(self, x):
        x = self.noise(x)
        x = self.conv1(x)
        x = torch.relu(x)
        x = self.pool1(x)
        x = self.drop1(x)
        x = self.conv2(x)
        x = torch.relu(x)
        x = self.pool2(x)
        x = self.drop2(x)
        x = self.flatten(x)
        x = self.fc1(x)
        x = torch.relu(x)
        x = self.drop3(x)
        x = self.fc2(x)
        return x

model = EEGNet(n_classes)
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = model.to(device)

criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.0005)

batch_size = 32
n_epochs = 16
    model.train()
    optimizer.zero_grad()
    outputs = model(X_train)
    loss = criterion(outputs, y_train)
    loss.backward()
    optimizer.step()
    if (epoch + 1) % 20 == 0:
        print(f"Epoch {epoch+1}/300, Loss: {loss.item():.4f}")

# Evaluate
model.eval()
with torch.no_grad():
    train_outputs = model(X_train)
    _, train_predicted = torch.max(train_outputs, 1)
    train_accuracy = (train_predicted == y_train).float().mean().item()
    print(f"Train Accuracy (should be ~100%): {train_accuracy*100:.2f}%")
    test_outputs = model(X_test)
    _, test_predicted = torch.max(test_outputs, 1)
    test_accuracy = (test_predicted == y_test).float().mean().item()
    print(f"Test Accuracy: {test_accuracy*100:.2f}%")

# Save model and class labels
torch.save(model.state_dict(), "eeg_model.pt")
np.save("class_labels.npy", encoder.classes_)